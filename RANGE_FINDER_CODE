/*
 * RangeFinder.c
 *
 * Created: 7/6/2015 12:41:36 PM
 *  Author: owner
 */ 


//
// Talking to ultrasonic sensor HC-SR04 with an ATtiny84, and
// sending distance data using serial communications.
//
// electronut.in
//


#define F_CPU 14745600UL

#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>
static int uart_putchar(char c, FILE *stream);
static int uart_getchar(FILE *stream);
FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

static int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = c;
	return 0;
}
static int uart_getchar(FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
	return UDR0;
}
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
	UBRR0 = 7;
	stdout = &mystdout;
	stdin = &mystdin;
}


//
// BEGIN: HC-SR04 code
//
// pins for HC-SR04
int pinEcho = PA0;

// initialize HC-SR04
void initHCSR04()
{
	// initialize HC-SR04 pins
	
	// set Trigger pin (connected to PB0) as output
	DDRB |= (1 << PB0);
}

// 1/0 flag to check if echo is over
volatile char echoDone = 0;

// current timer0 count
uint32_t countTimer0 = 0;

// get distance in cm from HC-SR04
float getDistanceHCSR04()
{
	// Send a 10us HIGH pulse on the Trigger pin.
	// The sensor sends out a “sonic burst” of 8 cycles.
	// Listen to the Echo pin, and the duration of the next HIGH
	// signal will give you the time taken by the sound to go back
	// and forth from sensor to target.
	
	float distance = 0.0f;
	
	// enable pin-change interrupt on PCINT0:
	cli();
	// enable interrupt
	TIMSK0 |= (1 << TOIE0);																//
	// enable pin
	PCMSK0 |= (1 << PCINT0);															//
	sei();
	
	// set echo flag
	echoDone = 0;
	// reset counter
	countTimer0 = 0;
	
	// send 10us trigger pulse
	//    _
	// __| |__
	PORTB &= ~(1 << PB0);
	_delay_us(20);
	PORTB |= (1 << PB0);
	_delay_us(12);
	PORTB &= ~(1 << PB0);
	_delay_us(20);
	
	// listen for echo and time it
	//       ____________
	// _____|            |___
	
	// loop till echo pin goes low
	while(!echoDone);
	
	// disable pin-change interrupt:
	// disable interrupt
	TIMSK0 &= ~(1 << TOIE0);										// CHANGE
	// disable pin
	PCMSK0 &= ~(1 << PCINT0);									// CHANGE
	
	// calculate duration
	float duration = countTimer0/8000000.0;
	
	// dist = duration * speed of sound * 1/2
	// dist in cm = duration in s * 340.26 * 100 * 1/2
	// = 17013*duration
	distance = 17013.0 * duration;
	
	return distance;
}

// timer0 overflow interrupt
ISR(TIM0_OVF_vect)															//CHANGE?
{
	// increment
	countTimer0 += 255;
}

// pin-change interrupt handler
ISR(PCINT0_vect)															//CHANGE?
{
	// read PCINT0 (PA0 - pn 13):
	if(PINA & (1 << pinEcho)) {
		// rising edge:
		
		// start 8-bit timer
		// Divide by 1
		TCCR0B |= (1<<CS00);												//CHANGE MAYBE NOT
		// set overflow interrupt flag
		TIMSK0 |= 1<<TOIE0;													//CHANGE MAYBE NOT
		
	}
	else {
		// falling edge
		
		// stop timer
		TCCR0B &= ~(1<<CS00);
		
		// calculate time passed
		countTimer0 += TCNT0;
		
		// reset counter in timer0
		TCNT0 = 0;
		
		// set flag
		echoDone = 1;
	}
}
//
// END: HC-SR04 code
//


//
// main loop:
//
int main (void)
{
	init_uart();
	
	
	// HC-SR04
	initHCSR04();
	
	// set as output
	DDRB |= (1 << PB0);
	
	//char str[16];
	
	float prevDist = 0.0;
	// loop
	while (1) {
		
		float dist = getDistanceHCSR04();
		// sensor only works till 400 cm - if it exceeds, this value
		// just send previous reading
		if(dist > 500) {
			dist = prevDist;
		}
		// print distance to serial port
		printf("%f\n", dist);
		prevDist = dist;
		
		// wait
		_delay_ms(70);
	}
	
	return 1;
}
